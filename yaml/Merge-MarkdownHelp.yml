examples:
- name: Example 1
  preCode: ''
  code: >-
    PS C:\> Merge-MarkdownHelp -Path @('Lync server 2010\Test-CsPhoneBootstrap.md', 'Lync server 2013

    \Test-CsPhoneBootstrap.md') -OutputPath lync
  postCode: The result file will be located at lync\Test-CsPhoneBootstrap.md
- name: Example 1
  preCode: ''
  code: >-
    PS C:\> Merge-MarkdownHelp -Path @('Lync server 2010\Test-CsPhoneBootstrap.md', 'Lync server 2013

    \Test-CsPhoneBootstrap.md') -OutputPath lync
  postCode: The result file will be located at lync\Test-CsPhoneBootstrap.md
inputs:
- type: System.String[]
  description: ''
links: []
module:
  name: ''
name: Merge-MarkdownHelp
notes: ''
optionalParameters:
- name: Encoding
  aliases: []
  defaultValue: UTF8 without BOM
  description: Specifies the character encoding for your external help file. Specify a System.Text.Encoding object. For more information, see Character Encoding in the .NET Framework (https://msdn.microsoft.com/en-us/library/ms404377.aspx)in the Microsoft Developer Network. For example, you can control Byte Order Mark (BOM) preferences. For more information, see Using PowerShell to write a file in UTF-8 without the BOM (http://stackoverflow.com/questions/5596982/using-powershell-to-write-a-file-in-utf-8-without-the-bom)at the Stack Overflow community.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: Encoding
- name: ExplicitApplicableIfAll
  aliases: []
  defaultValue: None
  description: Always write out full list of applicable tags. By default cmdlets and parameters that are present in all variations don't get an application tag.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: SwitchParameter
- name: Force
  aliases: []
  defaultValue: None
  description: Indicates that this cmdlet overwrites an existing file that has the same name.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: SwitchParameter
- name: MergeMarker
  aliases: []
  defaultValue: "'!!! '"
  description: String to be used as a merge text indicator. Applicable tag list would be included after the marker
  parameterValueGroup: []
  pipelineInput: False
  position: 3
  type: String
outputs:
- type: System.IO.FileInfo[]
  description: ''
requiredParameters:
- name: OutputPath
  aliases: []
  defaultValue: None
  description: Specifies the path of the folder where this cmdlet creates the combined markdown help files.
  parameterValueGroup: []
  pipelineInput: False
  position: 1
  type: String
- name: Path
  acceptWildcardCharacters: true
  aliases: []
  defaultValue: None
  description: Specifies an array of paths of markdown files or folders. This cmdlet creates combined markdown help based on these files and folders.
  parameterValueGroup: []
  pipelineInput: True (ByValue)
  position: 0
  type: String[]
remarks: >-
  If we have similar modules, or different version of the same module, we are likely to have a lot of duplicated markdown in them.

  Merge-MarkdownHelp allows you to keep all of them into a single markdown files. It uses `applicable:` yaml metadata field to identify what versions or tags are applicable. It acts on two levels: for the whole cmlets and for individual parameters.

  Besides the inserted `applicable:` tags, the result markdown will have all the content from  the individual versions. Duplicated content would be simple ignored, and different content would be merged using merge markers , followed by a comma-separated list of applicable tags.
summary: Merge multiply markdown version of the same cmdlets into a single markdown file.
syntaxes:
- parameters:
  - Path
  - OutputPath
  - MergeMarker
  - Encoding
  - ExplicitApplicableIfAll
  - Force
