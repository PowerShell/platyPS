name: PlatyPS-ModuleBuild-$(Build.BuildId)
trigger: none
pr: none

schedules:
- cron: '0 3 * * 1'
  displayName: Weekly Build
  branches:
    include:
    - v2
  always: true

parameters:
  - name: 'publishToPowerShellGallery'
    displayName: 'Publish module to PowerShell gallery'
    type: boolean
    default: false

variables:
  BuildConfiguration: Release
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  WindowsContainerImage: onebranch.azurecr.io/windows/ltsc2022/vse2022:latest

resources:
  repositories:
  - repository: templates
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main

extends:
  # https://aka.ms/obpipelines/templates
  template: v2/OneBranch.Official.CrossPlat.yml@templates
  parameters:
    release:
      category: NonAzure
    featureFlags:
      WindowsHostVersion: '1ESWindows2022'
    globalSdl: # https://aka.ms/obpipelines/sdl
      asyncSdl:
        enabled: true
        forStages: [build]
      credscan:
        enabled: true
        scanfolder: $(Build.SourcesDirectory)
        suppressionsFile: $(Build.SourcesDirectory)\.config\suppress.json
    stages:
    - stage: build
      jobs:
      - job: main
        displayName: Build package
        pool:
          type: windows
        variables:
        - name: ob_outputDirectory
          value: $(Build.SourcesDirectory)/out
        - name: ob_sdl_credscan_suppressionsFile
          value: $(Build.SourcesDirectory)\.config\suppress.json
        steps:
          - pwsh: |
              Write-Verbose -Verbose ((Get-Item $(Build.SourcesDirectory)).FullName)
              Get-ChildItem $(Build.SourcesDirectory) -Recurse -File -Name | Write-Verbose -Verbose
              $manifestData = Import-PowerShellDataFile -Path src/Microsoft.PowerShell.PlatyPS.psd1
              $moduleVersion = $manifestData.ModuleVersion
              Write-Output "##vso[task.setvariable variable=version;isOutput=true]$moduleVersion"
              if ($manifestData.PrivateData.PsData.Prerelease) {
                $prerel = $manifestData.PrivateData.PSData.Prerelease
                $nupkgVersion = "${moduleVersion}-${prerel}"
              } else {
                $nupkgVersion = $moduleVersion
              }
              Write-Output "##vso[task.setvariable variable=nupkgversion;isOutput=true]$nupkgVersion"
            name: package
            displayName: Get version from project properties
          - task: onebranch.pipeline.version@1
            displayName: Set OneBranch version
            inputs:
              system: Custom
              customVersion: $(package.version)
          - task: UseDotNet@2
            displayName: Use .NET SDK
            inputs:
              packageType: sdk
              useGlobalJson: true
          - pwsh: ./build.ps1 -Configuration $(BuildConfiguration)
            displayName: Build
          - task: onebranch.pipeline.signing@1
            displayName: Sign 1st-party files
            inputs:
              command: sign
              signing_profile: external_distribution
              search_root: $(Build.SourcesDirectory)/out/Microsoft.PowerShell.PlatyPS
              files_to_sign: |
                **/*.psm1;
                **/*.psd1;
                **/*.ps1xml;
                Microsoft.PowerShell.*.dll;
          - task: onebranch.pipeline.signing@1
            displayName: Sign 3rd-party files
            inputs:
              command: sign
              signing_profile: 135020002
              search_root: $(Build.SourcesDirectory)/out/Microsoft.PowerShell.PlatyPS/Dependencies
              files_to_sign: |
                Markdig.Signed.dll;
                YamlDotNet.dll;
                System.Buffers.dll
                System.Memory.dll
                System.Numerics.Vectors.dll
                System.Runtime.CompilerServices.Unsafe.dll
          - task: ArchiveFiles@2
            displayName: Zip module
            inputs:
              rootFolderOrFile: $(Build.SourcesDirectory)/out/Microsoft.PowerShell.PlatyPS
              includeRootFolder: false
              archiveType: zip
              archiveFile: out/Microsoft.PowerShell.PlatyPS-v$(package.version).zip
          - pwsh: |
              ./build -package
              Write-Verbose -Verbose ((Get-Item .).FullName)
              Write-Verbose -Verbose ((Get-Item $(Build.SourcesDirectory)).FullName)
              Get-ChildItem $(Build.SourcesDirectory) -Recurse -File -Name | Write-Verbose -Verbose
            displayName: Package module
          - task: onebranch.pipeline.signing@1
            displayName: Sign NuGet package
            inputs:
              command: sign
              signing_profile: external_distribution
              search_root: $(Build.SourcesDirectory)
              files_to_sign: "*.nupkg"
          - task: ArchiveFiles@2
            displayName: Zip nupkg
            inputs:
              rootFolderOrFile: $(Build.SourcesDirectory)/Microsoft.PowerShell.PlatyPS.$(package.nupkgVersion).nupkg
              includeRootFolder: false
              archiveType: zip
              archiveFile: out/Microsoft.PowerShell.PlatyPS.nupkg.zip
          - pwsh: |
              Write-Verbose -Verbose -Message "Validating nupkg exists"
              $nupkgPath = "$(Build.SourcesDirectory)/Microsoft.PowerShell.PlatyPS.$(package.nupkgVersion).nupkg"
              $exists = Test-Path $nupkgPath
              Write-Verbose -Verbose -Message "'$nupkgPath' exists: $exists"
            displayName: Validate nupkg existence
    - stage: Prod_release_official_platyps
      dependsOn: build
      condition: ${{ parameters.publishToPowerShellGallery }}
      variables:
        version: $[ stageDependencies.build.main.outputs['package.version'] ]
        drop: $(Pipeline.Workspace)/drop_build_main
        ob_release_environment: Production
      jobs:
      - job: ReleaseJob
        templateContext:
          inputs:
            - input: pipelineArtifact
              artifactName: drop_build_main
        displayName: Publish to PowerShell Gallery
        pool:
          type: release
          os: windows
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out/Microsoft.PowerShell.PlatyPS
        steps:
        - task: powershell@2
          inputs:
            targetType: inline
            script: |
              $zipFile = "$(drop)/Microsoft.PowerShell.PlatyPS.nupkg.zip"
              $zipExists = Test-Path $zipFile
              if (-not $zipExists) {
                Get-ChildItem -Recurse $(pipeline.Workspace) | %{ Write-Verbose -Verbose -Message $_.FullName }
                throw "'$zipFile' does not exist!"
              }
              Write-Verbose -Verbose -Message ("exists: $zipFile " + (Test-Path $zipFile))
              Expand-Archive -Path $zipFile -DestinationPath $(drop)
              $nupkgItem = Get-ChildItem -Path $(drop) -Filter "Microsoft.PowerShell.PlatyPS.*.nupkg" |
               Select-Object -First 1
              if (-not $nupkgItem) {
               throw "No nupkg found in '$(drop)'"
              }
              $nupkgPath = $nupkgItem.FullName
              Write-Output "##vso[task.setvariable variable=nupkgPath]${nupkgPath}"
        - task: NuGetCommand@2
          displayName: Push PlatyPS to PowerShell Gallery
          inputs:
            command: push
            packagesToPush: $(nupkgPath)
            nuGetFeedType: external
            publishFeedCredentials: PlatyPSGallery
